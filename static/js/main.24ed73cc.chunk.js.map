{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Board","React","useState","Array","fill","squares","setSquares","squaresSvg","setSvgSquares","nextValue","filter","Boolean","length","calcNextVal","winner","lines","i","a","b","c","calcWinner","status","every","calcCurr","selectSquare","square","squaresCopy","squaresSvgCopy","className","width","rx","transform","cx","cy","r","stroke","nextSvg","renderSquare","onClick","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAGA,SAASA,IACL,MAA8BC,IAAMC,SAASC,MAAM,GAAGC,KAAK,OAA3D,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCL,IAAMC,SAASC,MAAM,GAAGC,KAAK,OAAjE,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EA4FV,SAAqBJ,GACjB,OAAQA,EAAQK,OAAOC,SAASC,OAAS,IAAM,EAAI,IAAM,IA7FvCC,CAAYR,GACxBS,EAuEV,SAAoBT,GAYhB,IAXA,IAAMU,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFC,EAAI,EAAGA,EAAID,EAAMH,OAAQI,IAAK,CACnC,kBAAkBD,EAAMC,GAAxB,GAAOC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAId,EAAQY,IAAMZ,EAAQY,KAAOZ,EAAQa,IAAMb,EAAQY,KAAOZ,EAAQc,GAClE,OAAOd,EAAQY,GAEvB,OAAO,KAxFQG,CAAWf,GACpBgB,EAmGV,SAAkBP,EAAQT,EAASI,GAC/B,OAAOK,EAAM,UACJA,EADI,kBAEPT,EAAQiB,MAAMX,SAAd,2CAE4BF,GAxGnBc,CAAST,EAAQT,EAASI,GAEzC,SAASe,EAAaC,GAClB,IAAIX,IAAUT,EAAQoB,GAAtB,CAGA,IAAMC,EAAW,YAAOrB,GACxBqB,EAAYD,GAAUhB,EACtBH,EAAWoB,GAEX,IAAMC,EAAc,YAAOpB,GAC3BoB,EAAeF,GAoFvB,SAAiBpB,GACb,OAAQA,EAAQK,OAAOC,SAASC,OAAS,IAAM,EAAI,sBAAKgB,UAAU,QAAf,UAAuB,sBAAMA,UAAU,KAAKxB,KAAK,QAAQyB,MAAM,KAAKC,GAAG,IAAIC,UAAU,mCAAmC,sBAAMH,UAAU,KAAKxB,KAAK,QAAQyB,MAAM,KAAKC,GAAG,IAAIC,UAAU,qCAA2C,qBAAKH,UAAU,QAAf,SAAuB,wBAAQA,UAAU,OAAOI,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,OAAO,QAAQ/B,KAAK,kBArFlVgC,CAAQ/B,GACjCG,EAAcmB,IASlB,SAASU,EAAarB,GAClB,OACI,qBAAKY,UAAU,SAASU,QAAS,kBAAMd,EAAaR,IAApD,SACKT,EAAWS,KAKxB,OACI,sBAAKY,UAAU,cAAf,UACI,qBAAKA,UAAU,SAAf,SAAyBP,IACzB,sBAAKO,UAAU,YAAf,UACKS,EAAa,GACbA,EAAa,GACbA,EAAa,MAGlB,sBAAKT,UAAU,YAAf,UACKS,EAAa,GACbA,EAAa,GACbA,EAAa,MAGlB,sBAAKT,UAAU,YAAf,UACKS,EAAa,GACbA,EAAa,GACbA,EAAa,MAElB,wBAAQT,UAAU,UAAUU,QAjCpC,WACIhC,EAAWH,MAAM,GAAGC,KAAK,OACzBI,EAAcL,MAAM,GAAGC,KAAK,QA+BxB,wBAOZ,SAASmC,IACL,OACI,qBAAKX,UAAU,OAAf,SACI,qBAAKA,UAAU,aAAf,SACI,cAAC5B,EAAD,QA+CDwC,MAzCf,WACI,OAAO,cAACD,EAAD,KChEIE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.24ed73cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './App.css';\r\n\r\nfunction Board() {\r\n    const [squares, setSquares] = React.useState(Array(9).fill(null))\r\n    const [squaresSvg, setSvgSquares] = React.useState(Array(9).fill(null))\r\n\r\n    const nextValue = calcNextVal(squares)\r\n    const winner = calcWinner(squares)\r\n    const status = calcCurr(winner, squares, nextValue)\r\n\r\n    function selectSquare(square) {\r\n        if (winner || squares[square])\r\n            return\r\n\r\n        const squaresCopy = [...squares]\r\n        squaresCopy[square] = nextValue\r\n        setSquares(squaresCopy)\r\n\r\n        const squaresSvgCopy = [...squaresSvg]\r\n        squaresSvgCopy[square] = nextSvg(squares)\r\n        setSvgSquares(squaresSvgCopy)\r\n\r\n    }\r\n\r\n    function restart() {\r\n        setSquares(Array(9).fill(null))\r\n        setSvgSquares(Array(9).fill(null));\r\n    }\r\n\r\n    function renderSquare(i) {\r\n        return (\r\n            <div className=\"square\" onClick={() => selectSquare(i)}>\r\n                {squaresSvg[i]}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"boardlayout\">\r\n            <div className=\"status\">{status}</div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n            <button className=\"restart\" onClick={restart}>\r\n                Restart\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Game() {\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    return <Game />\r\n}\r\n\r\nfunction calcWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ]\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n            return squares[a]\r\n    }\r\n    return null\r\n}\r\n\r\nfunction calcNextVal(squares) {\r\n    return (squares.filter(Boolean).length % 2 === 0 ? 'X' : 'O')\r\n\r\n}\r\n\r\nfunction nextSvg(squares) {\r\n    return (squares.filter(Boolean).length % 2 === 0 ? <svg className=\"xmark\"><rect className=\"r1\" fill=\"white\" width=\"20\" rx=\"5\" transform=\"rotate(-45) translate(-25, 25)\" /><rect className=\"r2\" fill=\"white\" width=\"20\" rx=\"5\" transform=\"rotate(45) translate(68, -38)\" /></svg> : <svg className=\"omark\"><circle className=\"circ\" cx=\"50\" cy=\"68\" r=\"40\" stroke=\"white\" fill=\"transparent\" /></svg>)\r\n}\r\n\r\nfunction calcCurr(winner, squares, nextValue) {\r\n    return winner\r\n        ? `${winner} won the game!`\r\n        : squares.every(Boolean)\r\n            ? `Game Draw`\r\n            : `Current Turn: Player ${nextValue}`\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}